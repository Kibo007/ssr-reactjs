{"version":3,"file":"main.99c0ebdf52845ac0d7bb.hot-update.js","sources":["webpack:///src/server/index.js"],"sourcesContent":["import compression from 'compression';\nimport { match, RouterContext } from 'react-router';\n// import App from '../common/containers/App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\n// import LocaleProvider from 'antd/lib/locale-provider';\n// import enUS from 'antd/lib/locale-provider/en_US';\nimport configureStore from '../common/store/configureStore';\nimport express from 'express';\n// import { fetchCounter } from '../common/api/counter';\n// import qs from 'qs';\nimport { renderToString } from 'react-dom/server';\nimport serialize from 'serialize-javascript';\nimport {\n  // saveStateToSessionStorage,\n  loadStateFromSessionStorage\n} from '../common/helpers';\n\nimport getRoutes from '../common/routes';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\nconst server = express();\n\nserver\n  .disable('x-powered-by')\n  .use(compression())\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', (req, res) => {\n    match(\n      { routes: getRoutes(), location: req.url },\n      (error, redirectLocation, renderProps) => {\n        if (error) {\n          res.status(500).send(error.message);\n        } else if (redirectLocation) {\n          res.redirect(\n            302,\n            redirectLocation.pathname + redirectLocation.search\n          );\n        } else if (renderProps) {\n          // You can also check renderProps.components or renderProps.routes for\n          // your \"not found\" component or route respectively, and send a 404 as\n          // below, if you're using a catch-all route.\n          const context = {};\n\n          const preloadedState = loadStateFromSessionStorage();\n\n          // Create a new Redux store instance\n          const store = configureStore(preloadedState);\n          const markup = renderToString(\n            <Provider store={store}>\n              <RouterContext {...renderProps} />\n            </Provider>\n          );\n\n          const finalState = store.getState();\n\n          if (context.url) {\n            res.redirect(context.url);\n          } else {\n            // Render the component to a string\n\n            // Grab the initial state from our Redux store\n\n            // store.subscribe(() => {\n            //   debugger;\n            //   saveStateToSessionStorage(finalState);\n            // });\n\n            res.send(`<!doctype html>\n              <html lang=\"\">\n              <head>\n                  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n                  <meta charSet='utf-8' />\n                  <title>Razzle Redux Example</title>\n                  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                  ${\n                    assets.client.css\n                      ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n                      : ''\n                  }\n                    ${\n                      process.env.NODE_ENV === 'production'\n                        ? `<script src=\"${assets.client.js}\" defer></script>`\n                        : `<script src=\"${\n                            assets.client.js\n                          }\" defer crossorigin></script>`\n                    }\n              </head>\n              <body>\n                  <div id=\"root\">${markup}</div>\n                  <script>\n                    window.__PRELOADED_STATE__ = ${serialize(finalState)}\n                  </script>\n              </body>\n          </html>`);\n          }\n        } else {\n          res.status(404).send('Not found');\n        }\n      }\n    );\n    // fetchCounter(apiResult => {\n    //   // Read the counter from the request, if provided\n    //   const params = qs.parse(req.query);\n    //   const counter = parseInt(params.counter, 10) || apiResult || 0;\n\n    // Compile an initial state\n  });\n\nexport default server;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}