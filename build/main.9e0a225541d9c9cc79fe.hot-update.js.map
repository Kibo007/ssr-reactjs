{"version":3,"file":"main.9e0a225541d9c9cc79fe.hot-update.js","sources":["webpack:///src/server/index.js"],"sourcesContent":["import React from 'react';\nimport { Provider } from 'react-redux';\nimport { match, RouterContext } from 'react-router';\nimport { Capture } from 'react-loadable';\nimport { getBundles } from 'react-loadable/webpack';\n\nimport { StaticRouter } from 'react-router-dom';\nimport compression from 'compression';\n// import App from '../common/containers/App';\nimport stats from '../../build/react-loadable.json';\n// import LocaleProvider from 'antd/lib/locale-provider';\n// import enUS from 'antd/lib/locale-provider/en_US';\nimport configureStore from '../common/store/configureStore';\nimport express from 'express';\n// import { fetchCounter } from '../common/api/counter';\n// import qs from 'qs';\nimport { renderToString } from 'react-dom/server';\nimport serialize from 'serialize-javascript';\nimport {\n  // saveStateToSessionStorage,\n  loadStateFromSessionStorage\n} from '../common/helpers';\n\nimport Routes from '../common/routes';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\nconst server = express();\n\nserver\n  .disable('x-powered-by')\n  .use(compression())\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', (req, res) => {\n    match(\n      { routes: Routes(), location: req.url },\n      (error, redirectLocation, renderProps) => {\n        if (error) {\n          res.status(500).send(error.message);\n        } else if (redirectLocation) {\n          res.redirect(\n            302,\n            redirectLocation.pathname + redirectLocation.search\n          );\n        } else if (renderProps) {\n          // You can also check renderProps.components or renderProps.routes for\n          // your \"not found\" component or route respectively, and send a 404 as\n          // below, if you're using a catch-all route.\n          const context = {};\n          const modules = [];\n\n          const preloadedState = loadStateFromSessionStorage();\n\n          // Create a new Redux store instance\n          const store = configureStore(preloadedState);\n          const markup = renderToString(\n            <Provider store={store}>\n              <Capture report={moduleName => modules.push(moduleName)}>\n                <StaticRouter context={context} location={req.url}>\n                  <Routes />\n                </StaticRouter>\n              </Capture>\n            </Provider>\n          );\n\n          const finalState = store.getState();\n\n          if (context.url) {\n            res.redirect(context.url);\n          } else {\n            const bundles = getBundles(stats, modules);\n            const chunks = bundles.filter(bundle =>\n              bundle.file.endsWith('.js')\n            );\n            const styles = bundles.filter(bundle =>\n              bundle.file.endsWith('.css')\n            );\n\n            res.send(`<!doctype html>\n              <html lang=\"en\">\n              <head>\n                  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n                  <meta charSet='utf-8' />\n                  <title>Razzle Redux Example</title>\n                  <meta name=\"description\" content=\"A page's description, \n  usually one or two sentences.\"/>\n                  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                   ${\n                     assets.client.css\n                       ? `<link rel=\"stylesheet\" type=\"text/css\" href=\"${\n                           assets.client.css\n                         }\">`\n                       : ''\n                   }\n                  ${styles\n                    .map(style => {\n                      return `<link rel=\"stylesheet\" type=\"text/css\"s href=\"${\n                        style.file\n                      }\">`;\n                    })\n                    .join('\\n')}\n              </head>\n              <body>\n                <div id=\"root\">${markup}</div>\n                <script>\n                  window.__PRELOADED_STATE__ = ${serialize(finalState)}\n                </script>\n                ${\n                  process.env.NODE_ENV === 'production'\n                    ? `<script src=\"${assets.client.js}\"></script>`\n                    : `<script src=\"${assets.client.js}\" crossorigin></script>`\n                }\n                ${chunks\n                  .map(chunk =>\n                    process.env.NODE_ENV === 'production'\n                      ? `<script src=\"/${chunk.file}\"></script>`\n                      : `<script src=\"http://${process.env.HOST}:${parseInt(\n                          process.env.PORT,\n                          10\n                        ) + 1}/${chunk.file}\"></script>`\n                  )\n                  .join('\\n')}\n                <script>window.main();</script>\n              </body>\n          </html>`);\n          }\n        } else {\n          // window.location = '/404';\n          res.redirect('/404');\n          // res.status(404).send('Page Not Found');\n        }\n      }\n    );\n  });\n\nexport default server;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAGA;AAkBA;AAGA;AAcA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;A","sourceRoot":""}